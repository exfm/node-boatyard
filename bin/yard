#!/usr/bin/env node
"use strict";

var optimist = require('optimist'),
    argv = optimist.argv,
    fs = require('fs'),
    path = require('path'),
    exec = require('child_process').exec,
    spawn = require('child_process').spawn,
    sequence = require('sequence'),
    util = require('util'),
    EventEmitter = require('events').EventEmitter,
    when = require('when'),
    _ = require('underscore'),
    cmd,
    cmds,
    sailboat = '\u26F5  ',
    speedboat = '\uD83D\uDEA4  ',
    rowboat = '\uD83D\uDEA3  ',
    ship = '\uD83D\uDEA2  ',
    holdinghands = '\uD83D\uDC6C  ',
    man = '\uD83D\uDC73  ',
    fire = '\uD83D\uDD25  ',
    localConfig = false,
    configData = {},
    configPath = process.env.PWD + "/boat.json";

if(fs.existsSync(configPath)){
    configData = JSON.parse(fs.readFileSync(configPath), 'utf-8');
}

function saveConfig(){
    fs.writeFileSync(configPath, JSON.stringify(configData, null, 4), 'utf-8');
}

var help = [
    'Do things with boats!',
    '\n',
    'Commands:',
    '    '+speedboat+'yard build -b <boat> -p <partitioner> -t <task>',
    '       Build a new boat.',
    '',
    '    '+man+'yard addcaptain <boatname> <captainhostname>',
    '       Add a new captain to a boat.',
    '',
    '    '+rowboat+'yard addmate <boatname> <hostname>',
    '       Put a mate on the boat.',
    '',
    '    '+holdinghands+'yard addhands <boatname> <matehost> <howmany>',
    '       Set the number of hands a mate should command.',
    '',
    '    '+rowboat+'yard dep <boatname> <package> <version>',
    '       Add a dependency that will be installed on captains and mates.',
    '',
    '    '+ship+'yard launch <boatname>',
    '       Deploy code and start running a job!',
    '',
    '    '+fire+'yard crash <boatname>',
    '       Crash a boat, killing everyone onboard.'
];

argv = optimist
    .alias('h', 'help')
    .describe('h', 'Show help')
    .alias('b', 'boat')
    .describe('b', 'Boat name')
    .alias('t', 'task')
    .describe('t', 'Path to task function')
    .alias('p', 'partitioner')
    .describe('p', 'Path to partitioner function')
    .argv;

cmd = argv._[0];

if(cmd === undefined || argv.h){
    argv = optimist.usage(help.join("\n")).argv;
    return optimist.showHelp();
}

// Placeholders
function success(msg){
    console.log(msg);
}

function error(msg){
    console.error(msg);
}

function progress(msg){
    console.log(msg+'...');
}

function SSHClient(username, host, connectcb){
    var self = this;

    this.username = username;
    this.host = host;
    this.ready = false;
    this.queue = [];
    this.command = null;
    this.lastError = null;
    this.cb = null;
    this.interval = null;
    this.working = true;
    this.connected = false;
    this.killedSafe = false;
    var outBuff = "",
        out;


    this.ssh = spawn('ssh', ['-t', '-t', username + '@' + host]);
    this.ssh.stdout.on('data', function (data){
        // console.log('stdout: ' + data);
        if(self.connected === false){
            self.connected = true;
            self.working = false;
            return self.exec('pwd', function(){
                self.emit('connect');
            });
        }

        var isEnd = data.toString().indexOf('__SSHCLIENT__\r\n') > -1;
        outBuff += data.toString();

        // console.log(JSON.stringify(data.toString()), isEnd);

        // data = data.toString().replace('__SSHCLIENT__', '');
        if(self.cb && isEnd){
            outBuff = outBuff.split("echo __SSHCLIENT__;\r\n");
            out = (outBuff[1] && outBuff[1].length > 0) ? outBuff[1] : 'OK: ' + outBuff[0];
            out = out.replace("\r\n__SSHCLIENT__\r\n", "");
            // console.log(JSON.stringify(out));

            progress('<<< '+ self.username + '@' + self.host + ': ' + out);
            self.cb(null, out);

            outBuff = "";
            self.cb = null;
        }
        self.working = false;
    });

    this.ssh.stderr.on('data', function (data) {
        // console.log('stderr: ', data.toString());
        if(data.toString() === "Pseudo-terminal will not be allocated because stdin is not a terminal.\r\n"){
            return;
        }
        if(data.toString() === "Killed by signal 1.\r\n"){
            return this.emit('close');
        }
        if(data.toString().toLowerCase().indexOf('warn') > -1){
            return;
        }
        if(data.toString().indexOf('No README.md' > -1)){
            return;
        }
        self.lastError = data.toString();

        if(self.cb){
            self.cb(new Error(data.toString()), null);
            self.cb = null;
        }
        self.working = false;
    });

    this.ssh.on('exit', function (code, signal) {
        if(code !==0 && self.killedSafe === false){
            setTimeout(function(){
                console.error('Exited', self.lastError);
                self.emit('error', self.lastError);
            }, 50);
        }
    });

    this.on('connect', function(){
        self.working = false;

        connectcb();

        if(self.queue.length === 0){
            return;
        }
    });

    this.interval = setInterval(function(){
        if(self.queue.length > 0 && self.working === false){
            var d = self.queue.shift();
            self.cb = d[1];
            self.working = true;
            progress('>>> '+ self.username + '@' + self.host + ': ' + d[0]);
            var s = '';
            if(d[0].charAt(d[0].length - 1) !== "&"){
                s = ";";
            }
            self.ssh.stdin.write(d[0] + s + " echo __SSHCLIENT__;\n");
        }
    }, 1000);
}
util.inherits(SSHClient, EventEmitter);

SSHClient.prototype.exec = function(cmd, cb){
    this.queue.push([cmd, cb]);
};

SSHClient.prototype.close = function(){
    clearInterval(this.interval);
    this.killedSafe = true;
    this.ssh.kill('SIGHUP');
};

SSHClient.prototype.cd = function(dir, cb){
    this.exec("cd " + dir, cb);
};

function mkdir(username, host, dir, cb){
    var client;
    sequence().then(function(next){
        client = new SSHClient(username, host, next);
    }).then(function(next, err, out){
        client.exec("mkdir -p " + dir, next);
    }).then(function(next, err, out){
        client.close();
        cb(err, out);
    });
}

function scp(user, host, localPath, remotePath, cb){
    var c = [
        'scp',
        localPath,
        user + '@' + host + ':' + remotePath
    ];
    progress(">>> " + c.join(' '));
    exec(c.join(' '), function(error, stdout, stderr){
        cb(error, stdout, stderr);
    });
}

function putFile(user, host, contents, remotePath, cb){
    var tmpPath = 'file.' + (Math.random() * 100);
    fs.writeFile(tmpPath, contents, 'utf-8', function(err){
        scp(user, host, tmpPath, remotePath, function(){
            fs.unlink(tmpPath, function(){
                cb();
            });
        });
    });
}

cmds = {
    'build': function(){
        argv = optimist
            .demand(['b', 't', 'p'])
            .usage('Usage: yard build -b <boatname> -t <taskfile> -p <patitionerfile>')
            .argv;

        var boatName = argv.b,
            task = path.resolve(argv.t),
            partitioner = path.resolve(argv.p);

        configData = {
            'name': boatName,
            'task': task,
            'partitioner': partitioner,
            'captain': null,
            'mates': [],
            'hands': {},
            'stowaways': {},
            'dependencies': {
                "boatyard": "git://github.com/exfm/node-boatyard.git",
                "when": "git://github.com/exfm/when.git",
                "sequence": "2.2.1",
                "winston": "0.6.2",
                "nconf": "0.6.4"
            }
        };
        saveConfig();
        success('Boat built!');
    },
    'list': function(){
        console.log(JSON.stringify(configData, null, 4));
    },
    'dep': function(){
        var boatName = argv._[1],
            packageName = argv._[2],
            version = argv._[3];

        configData.dependencies[packageName] = version;
        saveConfig();
        success("Added dep " + packageName + "==" + version + " to boat "+boatName);
    },
    'addcaptain': function(){
        var boatName = argv._[1],
            captainHost = argv._[2];

        configData.captain = captainHost;
        saveConfig();
        success(boatName + " has a new captain " + captainHost + "!");
    },
    'addstowaway': function(){
        var boatName = argv._[1],
            name = argv._[2],
            value = argv._[3];

        configData.stowaways[name] = value;
        saveConfig();
        success(boatName + " has a new stowaway " + name + ": "+ value +"!");
    },
    'addmate': function(){
        var boatName = argv._[1],
            mateHost = argv._[2];

        configData.mates.push(mateHost);
        saveConfig();
        success(boatName + " has a new mate " + mateHost + "!");
    },
    'addhands': function(){
        var boatName = argv._[1],
            mateHost = argv._[2],
            numHands = argv._[3];

        configData.hands[mateHost] = numHands;
        saveConfig();
        success("Mate " + mateHost + " will manage " + numHands + " on boat " + boatName + "!");
    },
    'launch': function(){
        var client,
            user = 'ubuntu',
            boat = configData,
            remoteHome = '/home/ubuntu/boatyard/' + boat.name,
            c = [],
            allHosts = _.union(boat.mates, [boat.captain]),
            pkg = {
                'name': '',
                'version': '0.0.0',
                'dependencies': boat.dependencies,
                'boat': boat
            };

        sequence().then(function(next){
            next();
        }).then(function(next){
            when.all(allHosts.map(function(host){
                var d = when.defer();
                mkdir(user, host, remoteHome, d.resolve);
                return d.promise;
            }), next);

        // scp partitioner
        }).then(function(next){
            progress('Uploading partitioner');
            scp(user, boat.captain, boat.partitioner, remoteHome + '/partitioner.js', next);

        // scp task
        }).then(function(next){
            progress('Uploading task');
            when.all(boat.mates.map(function(mateHost){
                var d = when.defer();
                progress('Uploading to mate ' + mateHost);
                scp(user, mateHost, boat.task, remoteHome + '/task.js', d.resolve);
                return d.promise;
            }), next);

        // Create package.json on captain
        }).then(function(next){
            progress('Creating captain package.json');
            pkg.name = "boatyard-" + boat.name + "-captain";
            putFile(user, boat.captain, JSON.stringify(pkg, null, 4), remoteHome + '/package.json', function(){
                next();
            });
        }).then(function(next){
            progress('Creating package.json for mates');
            pkg.name = "boatyard-" + boat.name + "-mate";

            when.all(boat.mates.map(function(mateHost){
                var d = when.defer();
                progress('Uploading to mate ' + mateHost);
                putFile(user, mateHost, JSON.stringify(pkg, null, 4), remoteHome + '/package.json', d.resolve);
                return d.promise;
            }), next);

        // Install packages
        }).then(function(next){
            when.all(allHosts.map(function(host){
                var d = when.defer(),
                    c = new SSHClient(user, host, function(){
                        c.exec('cd ' + remoteHome, function(){
                            c.exec('sudo chown -R ubuntu:ubuntu /home/ubuntu/', function(){
                                c.exec('rm -rf ./node_modules/boatyard/', function(){
                                    c.exec('npm install', function(){
                                        c.close();
                                        d.resolve(host);
                                    });
                                });
                            });
                        });
                    });
                return d.promise;
            }), next);

        // Put captain executable
        }).then(function(next){
            scp(user, boat.captain, __dirname + "/captain",
                remoteHome + "/captain", next);

        // Put the mate executable
        }).then(function(next){
            when.all(boat.mates.map(function(mateHost){
                var d = when.defer();
                progress('Uploading to mate ' + mateHost);
                scp(user, mateHost, __dirname + "/mate",
                    remoteHome + "/mate", d.resolve);
                return d.promise;
            }), next);

        // Wake the captain!
        }).then(function(next){
        //     var c = new SSHClient(user, boat.captain, function(){
        //         c.exec('cd ' + remoteHome, function(){
        //             var args = [
        //                 '--size 100000',
        //                 '--boat ' + boat.name,
        //                 '--partitioner ' + remoteHome + '/partitioner.js'
        //             ];
        //             Object.keys(boat.stowaways).forEach(function(name){
        //                 args.push('--' + name + ' ' + boat.stowaways[name]);
        //             });

        //             c.exec('./captain '+ args.join(' ') +' > captain.log &', function(){
        //                 progress('Captain awake at ' + boat.captain + '!');
        //                 c.close();
        //                 next();
        //             });
        //         });
        //     });

        // // Mates to arms!
        // }).then(function(next){
        //     progress('Mates! To arms!');

        //     var args = [
        //         '--captain ' + boat.captain,
        //         '--boat ' + boat.name,
        //         '--task ' + remoteHome + '/task.js'
        //     ];
        //     Object.keys(boat.stowaways).forEach(function(name){
        //         args.push('--' + name + ' ' + boat.stowaways[name]);
        //     });

        //     when.all(boat.mates.map(function(mateHost){
        //         var mateArgs = args.slice(0),
        //             d = when.defer(),
        //             c = new SSHClient(user, mateHost, function(){
        //                 c.exec('cd ' + remoteHome, function(){
        //                     if(boat.hands.hasOwnProperty(mateHost)){
        //                         mateArgs.push('--hands ' + boat.hands[mateHost]);
        //                     }
        //                     c.exec('./mate '+ mateArgs.join(' ') +' > mate.log &', function(){
        //                         progress('Mate ' + mateHost + ' ready for battle!');
        //                         c.close();
        //                     });
        //                 });
        //             });
        //         return d.promise;
        //     }), next);
        // }).then(function(next){
            success("Boat is out at sea!");
        });
    },
    'ps': {
        // list all processes this boat owns
    }
};

cmds[cmd]();